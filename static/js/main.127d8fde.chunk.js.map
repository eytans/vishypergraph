{"version":3,"sources":["HyperGraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ID","id","label","Object","classCallCheck","this","createClass","key","value","toString","Node","literal","shape","arguments","length","undefined","color","background","border","HyperEdge","type","sources","hasTarget","optionsDefault","layout","hierarchical","edges","nodes","margin","HyperGraph","_Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","options","events","select","event","handleResize","console","log","forceUpdate","_optionsDefault$props","objectSpread","objectWithoutProperties","inherits","window","addEventListener","removeEventListener","_this2","maxId","Math","max","apply","toConsumableArray","map","index","array","toVisNode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","edge","toLowerCase","includes","newNode","push","concat","to","from","_iterator","Symbol","iterator","next","done","err","return","graph","react_default","a","createElement","vis_react_default","Component","App","textRef","React","createRef","state","text","isPattern","parser","generate","tracer","Tracer","tree","parse","e","getBacktraceString","current","parseText","getEdges","parseEdge","Map","flatMap","f","setState","Array","values","Container","style","height","minHeight","Row","Col","Button","onClick","handleClick","bind","Form","Control","ref","width","placeholder","HyperGraph_HyperGraph","graphkey","keys","find","element","Error","isArray","hyperTermId","hyperTermIdentifier","eType","extractIdentifier","target","extractId","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.127d8fde.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport Graph from 'vis-react'\r\n\r\ninterface VisNode {\r\n    id: number;\r\n    label: string;\r\n    shape?: string;\r\n    color?: string | {background: string, border: string};\r\n}\r\n\r\ninterface VisEdge {\r\n    from: number;\r\n    to: number;\r\n}\r\n\r\nexport class ID {\r\n    id: number;\r\n    label?: string;\r\n\r\n    constructor(id: number, label?: string) {\r\n        this.id = id;\r\n        this.label = label;\r\n    }\r\n\r\n    toString() {\r\n        if (this.label == null) {\r\n            return this.id.toString();\r\n        }\r\n        return this.label;\r\n    }\r\n}\r\n\r\nexport class Node {\r\n    id: ID;\r\n    literal?: string;\r\n    shape?: string;\r\n    color: string | {background: string, border: string};\r\n\r\n    constructor(id: ID, literal?: string, shape = \"ellipse\", color: string | {background: string, border: string} = {background: \"#80b3ff\", border: \"black\"}) {\r\n        this.id = id;\r\n        this.literal = literal;\r\n        this.shape = shape;\r\n        this.color = color\r\n    }\r\n\r\n    toVisNode(): VisNode {\r\n        return {\r\n            id: this.id.id,\r\n            shape: this.shape,\r\n            label: this.literal !== undefined ? this.literal : this.id.toString(),\r\n            color: this.color\r\n        }\r\n    }\r\n}\r\n\r\nexport class HyperEdge {\r\n    type: string;\r\n    sources: ID[];\r\n    hasTarget: boolean;\r\n\r\n    constructor(type: string, sources: ID[], hasTarget: boolean = true) {\r\n        this.type = type;\r\n        this.sources = sources;\r\n        this.hasTarget = hasTarget;\r\n    }\r\n}\r\n\r\ninterface HyperGraphProps {\r\n    nodes: Node[];\r\n    edges: HyperEdge[];\r\n    options?: { hasTarget: boolean };\r\n}\r\n\r\nconst optionsDefault = {\r\n    hasTarget: true,\r\n    layout: {\r\n        hierarchical: false\r\n    },\r\n    edges: {\r\n        color: '#000000'\r\n    },\r\n    nodes: {\r\n        margin: 10\r\n    }\r\n};\r\n\r\nexport class HyperGraph extends Component<HyperGraphProps, any> {\r\n    private readonly options: any;\r\n    private readonly hasTarget: boolean;\r\n\r\n    private events = {\r\n        select: function (event: any) {\r\n            let {nodes, edges} = event;\r\n        }\r\n    };\r\n\r\n    constructor(props: HyperGraphProps) {\r\n        super(props);\r\n        const {hasTarget, ...options} = {...optionsDefault, ...props.options};\r\n        this.hasTarget = hasTarget;\r\n        this.options = options;\r\n    }\r\n\r\n    handleResize = () => {\r\n        console.log(\"Trying rerender\");\r\n        this.forceUpdate();\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handleResize();\r\n        window.addEventListener('resize', this.handleResize)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.handleResize)\r\n    }\r\n\r\n    render() {\r\n        console.log(\"rendering hyper graph\");\r\n        let maxId = Math.max(...this.props.nodes.map((value: Node) => {\r\n            return value.id.id;\r\n        }));\r\n\r\n        let nodes: VisNode[] = this.props.nodes.map((value, index, array) => value.toVisNode());\r\n        let edges: VisEdge[] = [];\r\n\r\n        for (let edge of this.props.edges) {\r\n            maxId += 1;\r\n\r\n            let color: string = \"#88cc00\";\r\n            console.log(edge.sources.length);\r\n            if (edge.sources.length === 1)\r\n                color = 'pink';\r\n            if (edge.sources.length === 1 && edge.type.toLowerCase().includes('anchor'))\r\n                color = 'thistle';\r\n            console.log(color);\r\n\r\n            let newNode = new Node(new ID(maxId), edge.type, \"box\", {background: color, border: 'black'});\r\n            nodes.push(newNode.toVisNode());\r\n\r\n            edges = edges.concat(edge.sources.map((value: ID, index: number) => {\r\n                if (this.hasTarget && edge.hasTarget && index === 0) {\r\n                    return {to: value.id, from: newNode.id.id, color: color}\r\n                } else if (!this.hasTarget || !edge.hasTarget) {\r\n                    return {from: value.id, to: newNode.id.id, label: \"arg \" + (index + 1), color: color}\r\n                } else return {from: value.id, to: newNode.id.id, label: \"arg \" + index, color: color}\r\n            }));\r\n        }\r\n\r\n        let graph = {\r\n            nodes: nodes,\r\n            edges: edges\r\n        };\r\n\r\n        console.log(\"returning new hyper graph\");\r\n        return (\r\n            <Graph graph={graph} options={this.options} events={this.events}/>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Container, Row, Col, Form, Button} from \"react-bootstrap\";\r\nimport {HyperGraph, Node, HyperEdge, ID} from './HyperGraph'\r\nimport { generate } from 'pegjs'\r\nimport Tracer from 'pegjs-backtrace'\r\n\r\ninterface AppState {\r\n  nodes: Node[];\r\n  edges: HyperEdge[];\r\n}\r\n\r\nexport class App extends Component<Readonly<{}>, AppState> {\r\n  textRef: any;\r\n\r\n  constructor(props: Readonly<{}>) {\r\n    super(props);\r\n    this.textRef = React.createRef();\r\n    this.state = {\r\n      nodes: [],\r\n      edges: []\r\n    }\r\n  }\r\n\r\n  parseText(text: string, isPattern?: boolean): any {\r\n    let parser = generate(`\r\n    expression = exp:smallerexpression \"{\" exps:expressionlist \"}\" { return {type: 'tree', root:exp, subtrees: exps} } \r\n    / smallerexpression\r\n    \r\n    smallerexpression = root:identifier _ \"(\" exps:expressionlist \")\" {\r\n      var res = {type: 'node'};\r\n      res[root['value']] = exps;\r\n      return  res;\r\n    }\r\n    / number\r\n    / identifier\r\n    / literal\r\n    \r\n    expressionlist =  _ exp:expression? exps:( _ \",\" _ expression _ )* {\r\n        if (exp === null) return [];\r\n        else if (exps.length === 0) return exp;\r\n        else return [exp].concat(exps.map(function(a){ return a[3] }))\r\n      }\r\n    \r\n    identifier = lets:([^(),\"])+ {return {type: 'identifier', value:lets.join(\"\")}}\r\n    \r\n    number = digits:[0-9]+ {return {type: 'number', value:parseInt(digits.join(\"\"), 10)}}\r\n    \r\n    literal = '\"' lets:(!'\"' .)* '\"' {return {type: 'literal', value: lets.map(x => x[1]).join(\"\")}}\r\n    \r\n    _  = [ \\\\t\\\\r\\\\n]*`);\r\n    let tracer = new Tracer(text);\r\n    let tree = null;\r\n    try {\r\n      tree = parser.parse(text, {tracer: tracer});\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(tracer.getBacktraceString());\r\n    }\r\n    console.log(tree);\r\n    return tree;\r\n  }\r\n\r\n  static getEdges(tree: any): Array<any> {\r\n    // hypergraph(set(h,h,...))\r\n    let graphkey: string|undefined = Object.keys(tree).find(function(element: string) {\r\n      return element.toLowerCase().includes('hypergraph');\r\n    });\r\n\r\n    if (graphkey === undefined) {\r\n      throw new Error('bla');\r\n    }\r\n\r\n    console.log(graphkey);\r\n    if (Array.isArray(tree[graphkey]['Set'])) return tree[graphkey]['Set'].map((e: any) => e['HyperEdge']);\r\n    return [tree[graphkey]['Set']['HyperEdge']];\r\n  }\r\n\r\n  static extractId(hyperTermId: any) {\r\n    let label = null;\r\n    let value = -9999;\r\n    if (Object.keys(hyperTermId).includes('Explicit')) {\r\n      value = hyperTermId['Explicit']['HyperTermId']['value'];\r\n      label = 'Explicit';\r\n    } else if (Object.keys(hyperTermId).includes('Hole')) {\r\n      value = -hyperTermId['Hole']['value'];\r\n      label = 'Hole';\r\n    } else if (Object.keys(hyperTermId).includes('Ignore')){\r\n      label = 'Ignore';\r\n    } else if (Object.keys(hyperTermId).includes('Repetition')) {\r\n      value = hyperTermId['Repetition'][1]['value'];\r\n      label = 'Repetition';\r\n    } else if (Object.keys(hyperTermId).includes('Stream')) {\r\n      value = hyperTermId['Repetition'][1]['value'];\r\n      label = 'Repetition';\r\n    } else return new ID(hyperTermId['HyperTermId']['value']);\r\n\r\n    return new ID(value, label + '(' + value + ')');\r\n  }\r\n\r\n  static extractIdentifier(hyperTermIdentifier: any): string {\r\n    if (Object.keys(hyperTermIdentifier).includes('Explicit')) {\r\n      var literal = hyperTermIdentifier['Explicit']['HyperTermIdentifier']['Identifier'][0];\r\n      return literal['value'];\r\n    } else if (Object.keys(hyperTermIdentifier).includes('Hole')) {\r\n      return \"Hole(\" + hyperTermIdentifier['Hole']['value'] + \")\";\r\n    } else if (Object.keys(hyperTermIdentifier).includes('Ignore')) {\r\n      return  'Ignore';\r\n    } else return hyperTermIdentifier['HyperTermIdentifier']['Identifier'][0]['value'];\r\n  }\r\n\r\n  static parseEdge(edge: any) {\r\n    let eType = App.extractIdentifier(edge[1]);\r\n    let target = [App.extractId(edge[0])];\r\n    let sources = edge[2]['List'];\r\n    if (sources === undefined) sources = [];\r\n    else if (Array.isArray(sources))\r\n      sources = sources.map(App.extractId);\r\n    else sources = [App.extractId(sources)];\r\n    if (eType === \"type\") return new HyperEdge(eType, sources, false);\r\n    return new HyperEdge(eType, target.concat(sources));\r\n  }\r\n\r\n  handleClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    let text = this.textRef.current.value;\r\n    if (typeof text === 'string') {\r\n      let tree = this.parseText(text);\r\n      let edges = App.getEdges(tree).map(e => App.parseEdge(e));\r\n      let nodes = new Map<number, Node>(edges.flatMap(function (e: HyperEdge) {\r\n        console.log(e.sources);\r\n        return e.sources.map(f => [f.id, new Node(f)])\r\n      }));\r\n      this.setState({nodes: Array.from(nodes.values()), edges: edges})\r\n    }\r\n  }\r\n\r\n  handleResize = () => {\r\n    console.log(\"Trying rerender\");\r\n    this.forceUpdate();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.handleResize();\r\n    window.addEventListener('resize', this.handleResize)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n  }\r\n\r\n  render() {\r\n    console.log(\"rendering app\");\r\n    return (\r\n    <Container style={{height: '100vh', 'minHeight': '100vh'}}>\r\n      <Row>\r\n        <Col><Button onClick={this.handleClick.bind(this)}>Draw Graph!</Button>\r\n        <Form.Control ref={this.textRef} style={{width: '75vh'}} type=\"text\" placeholder=\"Enter hyper graph text\"/></Col>\r\n      </Row>\r\n      <Row style={{height: '100%'}}>\r\n        <HyperGraph\r\n            edges={this.state.edges}\r\n            nodes={this.state.nodes}/>\r\n      </Row>\r\n    </Container>);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}