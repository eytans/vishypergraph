{"version":3,"sources":["HyperGraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ID","id","label","Object","classCallCheck","this","createClass","key","value","toString","Node","literal","shape","arguments","length","undefined","HyperEdge","type","sources","optionsDefault","hasTarget","layout","hierarchical","edges","color","nodes","margin","HyperGraph","_Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","options","events","select","event","_optionsDefault$props","objectSpread","objectWithoutProperties","inherits","_this2","maxId","Math","max","apply","toConsumableArray","map","index","array","toVisNode","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","edge","newNode","push","concat","to","from","_iterator","Symbol","iterator","next","done","err","return","graph","react_default","a","createElement","vis_react_default","Component","App","textRef","React","createRef","state","text","isPattern","parser","generate","tracer","Tracer","tree","parse","e","console","log","getBacktraceString","graphkey","keys","find","element","toLowerCase","includes","Error","Array","isArray","hyperTermId","hyperTermIdentifier","eType","extractIdentifier","target","extractId","current","parseText","getEdges","parseEdge","Map","flatMap","f","setState","values","Container","style","height","minHeight","Row","Col","Button","onClick","handleClick","bind","Form","Control","ref","width","placeholder","HyperGraph_HyperGraph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36dd1c11.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Graph from 'vis-react'\r\n\r\ninterface VisNode {\r\n    id: number;\r\n    label: string;\r\n    shape?: string;\r\n}\r\n\r\ninterface VisEdge {\r\n    from: number;\r\n    to: number;\r\n}\r\n\r\nexport class ID {\r\n    id: number;\r\n    label?: string;\r\n\r\n    constructor(id: number, label?: string) {\r\n        this.id = id;\r\n        this.label = label;\r\n    }\r\n\r\n    toString() {\r\n        if (this.label == null) {\r\n            return this.id.toString();\r\n        }\r\n        return this.label;\r\n    }\r\n}\r\n\r\nexport class Node {\r\n    id: ID;\r\n    literal?: string;\r\n    shape?: string;\r\n\r\n    constructor(id: ID, literal?: string, shape = \"ellipse\") {\r\n        this.id = id;\r\n        this.literal = literal;\r\n        this.shape = shape;\r\n    }\r\n\r\n    toVisNode(): VisNode {\r\n        return {id: this.id.id, shape: this.shape, label: this.literal !== undefined ? this.literal : this.id.toString()}\r\n    }\r\n}\r\n\r\nexport class HyperEdge {\r\n    type: string;\r\n    sources: ID[];\r\n\r\n    constructor(type: string, sources: ID[]) {\r\n        this.type = type;\r\n        this.sources = sources;\r\n    }\r\n}\r\n\r\ninterface HyperGraphProps {\r\n    nodes: Node[];\r\n    edges: HyperEdge[];\r\n    options?: {hasTarget: boolean};\r\n}\r\n\r\nconst optionsDefault = {\r\n    hasTarget: true,\r\n    layout: {\r\n        hierarchical: false\r\n    },\r\n    edges: {\r\n        color: '#000000'\r\n    },\r\n    nodes: {\r\n        margin: 10\r\n    }\r\n};\r\n\r\nexport class HyperGraph extends Component<HyperGraphProps, any> {\r\n    private readonly options: any;\r\n    private readonly hasTarget: boolean;\r\n\r\n    private events = {\r\n        select: function(event: any) {\r\n            let { nodes, edges } = event;\r\n        }\r\n    };\r\n\r\n    constructor(props: HyperGraphProps) {\r\n        super(props);\r\n        const {hasTarget, ...options} = {...optionsDefault, ...props.options};\r\n        this.hasTarget = hasTarget;\r\n        this.options = options;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let maxId = Math.max(...this.props.nodes.map((value: Node) => { return value.id.id; }));\r\n\r\n        let nodes: VisNode[] = this.props.nodes.map((value, index, array) => value.toVisNode());\r\n        let edges: VisEdge[] = [];\r\n\r\n        for (let edge of this.props.edges) {\r\n            maxId += 1;\r\n            let newNode = new Node(new ID(maxId), edge.type, \"box\");\r\n            nodes.push(newNode.toVisNode());\r\n            edges = edges.concat(edge.sources.map((value: ID, index: number) => {\r\n                if (this.hasTarget && index === 0) {\r\n                    return {to: value.id, from: newNode.id.id}\r\n                }\r\n                return {from: value.id, to: newNode.id.id, label: \"arg \" + index}\r\n            }));\r\n        }\r\n\r\n        let graph = {\r\n            nodes: nodes,\r\n            edges: edges\r\n        };\r\n\r\n        return (\r\n            <Graph graph={graph} options={this.options}  events={this.events}/>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Container, Row, Col, Form, Button} from \"react-bootstrap\";\r\nimport {HyperGraph, Node, HyperEdge, ID} from './HyperGraph'\r\nimport { generate } from 'pegjs'\r\nimport Tracer from 'pegjs-backtrace'\r\n\r\ninterface AppState {\r\n  nodes: Node[];\r\n  edges: HyperEdge[];\r\n}\r\n\r\nexport class App extends Component<Readonly<{}>, AppState> {\r\n  textRef: any;\r\n\r\n  constructor(props: Readonly<{}>) {\r\n    super(props);\r\n    this.textRef = React.createRef();\r\n    this.state = {\r\n      nodes: [],\r\n      edges: []\r\n    }\r\n  }\r\n\r\n  parseText(text: string, isPattern?: boolean): any {\r\n    let parser = generate(`\r\n    expression = exp:smallerexpression \"{\" exps:expressionlist \"}\" { return {type: 'tree', root:exp, subtrees: exps} } \r\n    / smallerexpression\r\n    \r\n    smallerexpression = root:identifier _ \"(\" exps:expressionlist \")\" {\r\n      var res = {type: 'node'};\r\n      res[root['value']] = exps;\r\n      return  res;\r\n    }\r\n    / number\r\n    / identifier\r\n    / literal\r\n    \r\n    expressionlist =  _ exp:expression? exps:( _ \",\" _ expression _ )* {\r\n        if (exp === null) return [];\r\n        else if (exps.length === 0) return exp;\r\n        else return [exp].concat(exps.map(function(a){ return a[3] }))\r\n      }\r\n    \r\n    identifier = lets:([^(),\"])+ {return {type: 'identifier', value:lets.join(\"\")}}\r\n    \r\n    number = digits:[0-9]+ {return {type: 'number', value:parseInt(digits.join(\"\"), 10)}}\r\n    \r\n    literal = '\"' lets:(!'\"' .)* '\"' {return {type: 'literal', value: lets.map(x => x[1]).join(\"\")}}\r\n    \r\n    _  = [ \\\\t\\\\r\\\\n]*`);\r\n    let tracer = new Tracer(text);\r\n    let tree = null;\r\n    try {\r\n      tree = parser.parse(text, {tracer: tracer});\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(tracer.getBacktraceString());\r\n    }\r\n    console.log(tree);\r\n    return tree;\r\n  }\r\n\r\n  getEdges(tree: any): Array<any> {\r\n    // hypergraph(set(h,h,...))\r\n    let graphkey: string|undefined = Object.keys(tree).find(function(element: string) {\r\n      return element.toLowerCase().includes('hypergraph');\r\n    });\r\n\r\n    if (graphkey === undefined) {\r\n      throw new Error('bla');\r\n    }\r\n\r\n    console.log(graphkey);\r\n    if (Array.isArray(tree[graphkey]['Set'])) return tree[graphkey]['Set'].map((e: any) => e['HyperEdge']);\r\n    return [tree[graphkey]['Set']['HyperEdge']];\r\n  }\r\n\r\n  extractId(hyperTermId: any) {\r\n    let label = null;\r\n    let value = -9999;\r\n    if (Object.keys(hyperTermId).includes('Explicit')) {\r\n      value = hyperTermId['Explicit']['HyperTermId']['value'];\r\n      label = 'Explicit';\r\n    } else if (Object.keys(hyperTermId).includes('Hole')) {\r\n      value = -hyperTermId['Hole']['value'];\r\n      label = 'Hole';\r\n    } else if (Object.keys(hyperTermId).includes('Ignore')){\r\n      label = 'Ignore';\r\n    } else if (Object.keys(hyperTermId).includes('Repetition')) {\r\n      value = hyperTermId['Repetition'][1]['value'];\r\n      label = 'Repetition';\r\n    } else return new ID(hyperTermId['HyperTermId']['value']);\r\n\r\n    return new ID(value, label + '(' + value + ')');\r\n  }\r\n\r\n  extractIdentifier(hyperTermIdentifier: any) {\r\n    if (Object.keys(hyperTermIdentifier).includes('Explicit')) {\r\n      var literal = hyperTermIdentifier['Explicit']['HyperTermIdentifier']['Identifier'][0];\r\n      return literal['value'];\r\n    } else if (Object.keys(hyperTermIdentifier).includes('Hole')) {\r\n      return \"Hole(\" + hyperTermIdentifier['Hole']['value'] + \")\";\r\n    } else if (Object.keys(hyperTermIdentifier).includes('Ignore')) {\r\n      return  'Ignore';\r\n    } else return hyperTermIdentifier['HyperTermIdentifier']['Identifier'][0]['value'];\r\n  }\r\n\r\n  parseEdge(edge: any) {\r\n    let eType = this.extractIdentifier(edge[1]);\r\n    let target = [this.extractId(edge[0])];\r\n    let sources = edge[2]['List'];\r\n    if (sources === undefined) sources = [];\r\n    else if (Array.isArray(sources))\r\n      sources = sources.map(this.extractId);\r\n    else sources = [this.extractId(sources)];\r\n    return new HyperEdge(eType.toString(), target.concat(sources));\r\n  }\r\n\r\n  handleClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    let text = this.textRef.current.value;\r\n    if (typeof text === 'string') {\r\n      let tree = this.parseText(text);\r\n      let edges = this.getEdges(tree).map(e => this.parseEdge(e));\r\n      let nodes = new Map<number, Node>(edges.flatMap(function (e: HyperEdge) {\r\n        console.log(e.sources);\r\n        return e.sources.map(f => [f.id, new Node(f)])\r\n      }));\r\n      this.setState({nodes: Array.from(nodes.values()), edges: edges})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <Container style={{height: '100vh', 'minHeight': '100vh'}}>\r\n      <Row>\r\n        <Col><Button onClick={this.handleClick.bind(this)}>Draw Graph!</Button>\r\n        <Form.Control ref={this.textRef} style={{width: '75vh'}} type=\"text\" placeholder=\"Enter hyper graph text\"/></Col>\r\n      </Row>\r\n      <Row style={{height: '100%'}}>\r\n        <HyperGraph\r\n            edges={this.state.edges}\r\n            nodes={this.state.nodes}/>\r\n      </Row>\r\n    </Container>);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}